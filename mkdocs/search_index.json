{
    "docs": [
        {
            "location": "/", 
            "text": "ssshtest - \ns\ntupid \ns\nimple (ba)\nsh\n \ntest\ning\n\n\n \n\n\n\n\nssshtest\n is designed to be practical and easy to use.\n\n\nTo use \nssshtest\n in your project just source it in your test file\n\n\ntest -e ssshtest || wget -q https://raw.githubusercontent.com/ryanlayer/ssshtest/master/ssshtest\n. ssshtest\n\n\n\n\nThen write some tests:\n\n\nrun test_for_success python -c \nprint 'zzz: example success'\n\nassert_in_stdout \nzzz\n\n\nrun test_for_stderr python -c \nsys.stderr.write('zzz: example failure')\n\nassert_in_stderr \nxxx\n\n\n\n\n\nThen simply run the bash file that contains those lines.\n\n\n$ bash mytests.sh\n\n\n\n\nTo run only certain tests, use:\n\n\n$ bash mytests.sh test_for_success test_42\n\n\n\n\nFor an example of how to use \ntravis\n continuous integration tests, our \n.travis.yml\n\n\nFunctions\n\n\nrun (2)\n\n\nrun a block of code. This must precede any of the testing functions below.\n\n\nArguments\n\n\n\n\nname for test.\n\n\ncode to run\n\n\n\n\nassert_equal (2)\n\n\nAssert that 2 things are equal.\nThis does a string comparison so assert_equal \"2\" \"  2\" will fail.\n\n\nArguments\n\n\n\n\nobserved\n\n\nexpected\n\n\n\n\nassert_equal 42 $((21 + 21))\n\n\n\n\nassert_stdout (0)\n\n\nAssert that stdout is not empty\n\n\nrun test_stdout python -c \nprint 'zzz: example success'\n\nassert_stdout\n\n\n\n\nassert_in_stdout (1)\n\n\nAssert that stdout out contains this text.\n\n\nrun test_in_stdout python -c \nprint 'zzz: example success'\n\nassert_in_stdout \nzzz\n\n\n\n\n\nArguments\n\n\n\n\ntext to match\n\n\n\n\nassert_no_stdout (0)\n\n\nAssert that stdout is empty\n\n\nrun test_empty_stdout python -c \nimport sys; sys.stderr.write('aaa')\n\nassert_no_stdout\n\n\n\n\nassert_stderr (0)\n\n\nAssert that stderr is not empty\n\n\nrun test_stderr python -c \nimport sys; sys.stderr.write('zzz: example success')\n\nassert_stderr\n\n\n\n\nassert_in_stderr (1)\n\n\nAssert that stderr out contains this text.\n\n\nArguments\n\n\n\n\ntext to match\n\n\n\n\nrun test_in_stderr python -c \nimport sys; sys.stderr.write('zzz: example success')\n\nassert_in_stderr \nzzz\n\n\n\n\n\nassert_no_stderr (0)\n\n\nAssert that stderr is empty\n\n\nrun test_no_stderr python -c \nprint 'aaa'\n\nassert_no_stderr\n\n\n\n\nassert_exit_code (1)\n\n\nAssert that the program exited with a particular code\n\n\nArguments\n\n\n\n\nexit code\n\n\n\n\nrun test_exit_code python -c \nimport sys; sys.exit(33)\n\nassert_exit_code 33\n\n\n\n\nVariables\n\n\nSTOP_ON_FAIL\n\n\nSet STOP_ON_FAIL=1 after sourcing \nssshtest\n to stop on the first error. Default is to continue running\n\n\nSTDOUT_FILE\n\n\n$STDOUT_FILE\n is a file containing the $STDOUT from the last run command\n\n\nSTDERR_FILE\n\n\n$STDERR_FILE\n is a file containing the $STDERR from the last run command\n\n\nLICENSE\n\n\nMIT LICENSE", 
            "title": "Home"
        }, 
        {
            "location": "/#ssshtest-stupid-simple-bash-testing", 
            "text": "ssshtest  is designed to be practical and easy to use.  To use  ssshtest  in your project just source it in your test file  test -e ssshtest || wget -q https://raw.githubusercontent.com/ryanlayer/ssshtest/master/ssshtest\n. ssshtest  Then write some tests:  run test_for_success python -c  print 'zzz: example success' \nassert_in_stdout  zzz \n\nrun test_for_stderr python -c  sys.stderr.write('zzz: example failure') \nassert_in_stderr  xxx   Then simply run the bash file that contains those lines.  $ bash mytests.sh  To run only certain tests, use:  $ bash mytests.sh test_for_success test_42  For an example of how to use  travis  continuous integration tests, our  .travis.yml", 
            "title": "ssshtest - stupid simple (ba)sh testing"
        }, 
        {
            "location": "/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/#run-2", 
            "text": "run a block of code. This must precede any of the testing functions below.  Arguments   name for test.  code to run", 
            "title": "run (2)"
        }, 
        {
            "location": "/#assert_equal-2", 
            "text": "Assert that 2 things are equal.\nThis does a string comparison so assert_equal \"2\" \"  2\" will fail.  Arguments   observed  expected   assert_equal 42 $((21 + 21))", 
            "title": "assert_equal (2)"
        }, 
        {
            "location": "/#assert_stdout-0", 
            "text": "Assert that stdout is not empty  run test_stdout python -c  print 'zzz: example success' \nassert_stdout", 
            "title": "assert_stdout (0)"
        }, 
        {
            "location": "/#assert_in_stdout-1", 
            "text": "Assert that stdout out contains this text.  run test_in_stdout python -c  print 'zzz: example success' \nassert_in_stdout  zzz   Arguments   text to match", 
            "title": "assert_in_stdout (1)"
        }, 
        {
            "location": "/#assert_no_stdout-0", 
            "text": "Assert that stdout is empty  run test_empty_stdout python -c  import sys; sys.stderr.write('aaa') \nassert_no_stdout", 
            "title": "assert_no_stdout (0)"
        }, 
        {
            "location": "/#assert_stderr-0", 
            "text": "Assert that stderr is not empty  run test_stderr python -c  import sys; sys.stderr.write('zzz: example success') \nassert_stderr", 
            "title": "assert_stderr (0)"
        }, 
        {
            "location": "/#assert_in_stderr-1", 
            "text": "Assert that stderr out contains this text.  Arguments   text to match   run test_in_stderr python -c  import sys; sys.stderr.write('zzz: example success') \nassert_in_stderr  zzz", 
            "title": "assert_in_stderr (1)"
        }, 
        {
            "location": "/#assert_no_stderr-0", 
            "text": "Assert that stderr is empty  run test_no_stderr python -c  print 'aaa' \nassert_no_stderr", 
            "title": "assert_no_stderr (0)"
        }, 
        {
            "location": "/#assert_exit_code-1", 
            "text": "Assert that the program exited with a particular code  Arguments   exit code   run test_exit_code python -c  import sys; sys.exit(33) \nassert_exit_code 33", 
            "title": "assert_exit_code (1)"
        }, 
        {
            "location": "/#variables", 
            "text": "", 
            "title": "Variables"
        }, 
        {
            "location": "/#stop_on_fail", 
            "text": "Set STOP_ON_FAIL=1 after sourcing  ssshtest  to stop on the first error. Default is to continue running", 
            "title": "STOP_ON_FAIL"
        }, 
        {
            "location": "/#stdout_file", 
            "text": "$STDOUT_FILE  is a file containing the $STDOUT from the last run command", 
            "title": "STDOUT_FILE"
        }, 
        {
            "location": "/#stderr_file", 
            "text": "$STDERR_FILE  is a file containing the $STDERR from the last run command", 
            "title": "STDERR_FILE"
        }, 
        {
            "location": "/#license", 
            "text": "MIT LICENSE", 
            "title": "LICENSE"
        }
    ]
}